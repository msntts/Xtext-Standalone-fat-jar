/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.generator;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

import java.io.File;
import java.util.List;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.GeneratorDelegate;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;
import org.xtext.example.mydsl.MyDslStandaloneSetup;

public class Main {

	public static void main(String[] args) {
		if (args.length == 0) {
			System.err.println("Aborting: no path to EMF resource provided!");
			return;
		}
		Injector injector = new MyDslStandaloneSetup().createInjectorAndDoEMFRegistration();
		Main main = injector.getInstance(Main.class);
		main.runGenerator(args[0]);
	}

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject
	private GeneratorDelegate generator;

	@Inject
	private JavaIoFileSystemAccess fileAccess;

	protected void runGenerator(String path) {
		// Load the resource
		ResourceSet set = resourceSetProvider.get();
		initializeResourceSet(path, set);

		for (Resource resource : set.getResources()) {
			// Validate the resource
			List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
			if (!list.isEmpty()) {
				for (Issue issue : list) {
					System.err.println(issue);
				}
				return;
			}

			// Configure and start the generator
			fileAccess.setOutputPath("src-gen/");
			GeneratorContext context = new GeneratorContext();
			context.setCancelIndicator(CancelIndicator.NullImpl);
			generator.generate(resource, fileAccess, context);
		}
		System.out.println("Code generation finished.");
	}

	/**
	 * /* ResourceSetにResourceを追加する.
	 * 
	 * @param path mydslファイルパス or mydslファイルが格納されているフォルダパス.
	 * @param set  mydslファイルから生成したResourceを追加するResourceSet.
	 */
	private void initializeResourceSet(String path, ResourceSet set) {
		File target = new File(path);

		if (target.isDirectory()) {
			for (File file : target.listFiles()) {
				initializeResourceSet(file.getAbsolutePath(), set);
			}
		} else {
			// ResourceSet.getResource()でmydslファイルのResourceが追加され
			// ResourceSet.getResources()で取得可能となる.
			// これによりmydslファイルをまたがったCrossRefferenceができるようになる.
			set.getResource(URI.createFileURI(target.getAbsolutePath()), true);
		}
	}
}
